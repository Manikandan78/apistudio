from sqlalchemy import (create_engine, Column, Date, DateTime,
                        Integer, String, Boolean, ForeignKey,
                        Float, func, Time, LargeBinary, Text)
from database import Base
from sqlalchemy.orm import relationship
import rule_engine
import datetime
import uuid
from sqlalchemy.orm import validates
from sqlalchemy.orm import relationship


class ApiSysConfig(Base):
    __tablename__ = "api_sys_config"

    id = Column(Integer, primary_key=True, index=True, unique=True)
    config_name = Column(String)


# ----- GENERATED MODELS -----
class NmsServerStatus(Base):
    __tablename__ = "nms_server_status"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    active_server = Column(Integer)
    not_active_server = Column(Integer)
    last_uptime = Column(Date)
    last_down_time = Column(Date)

    @validates('last_uptime')
    def validate_last_uptime(self, key, last_uptime):
        if not rule_engine.is_valid_date(last_uptime, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {last_uptime}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return last_uptime

    @validates('last_down_time')
    def validate_last_down_time(self, key, last_down_time):
        if not rule_engine.is_valid_date(last_down_time, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {last_down_time}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return last_down_time



class NmsServerDetails(Base):
    __tablename__ = "nms_server_details"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    server_name = Column(String)
    server_system = Column(String)
    server_ram_size = Column(Integer)
    server_processor = Column(String)
    server_ip_addr = Column(Text)
    server_os_version = Column(Integer)



class NmsBackup(Base):
    __tablename__ = "nms_backup"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    host_name = Column(String)
    db_engine = Column(String)
    db_name = Column(String)
    backup_file_name = Column(String)
    backup_file_size = Column(Integer)
    backup_file_loca = Column(String)
    backup_status = Column(String)
    prev_backup_time = Column(Time)
    next_backup_time = Column(Time)
    app_name = Column(String)

    @validates('prev_backup_time')
    def validate_prev_backup_time(self, key, prev_backup_time):
        if not rule_engine.is_valid_date(prev_backup_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {prev_backup_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return prev_backup_time

    @validates('next_backup_time')
    def validate_next_backup_time(self, key, next_backup_time):
        if not rule_engine.is_valid_date(next_backup_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {next_backup_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return next_backup_time



class LoginUsers(Base):
    __tablename__ = "login_users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    nickname = Column(String, nullable=False)
    company = Column(Integer, nullable=False)
    username = Column(String, nullable=True)
    password = Column(String, nullable=True)
    emailid = Column(String, nullable=False)
    active = Column(Boolean)
    mobileno = Column(String, nullable=False)
    user_role = Column(String, nullable=False)



class GaplGstData(Base):
    __tablename__ = "gapl_gst_data"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    inv_no = Column(String)
    inv_date = Column(Date)
    cust_name = Column(String)

    @validates('inv_date')
    def validate_inv_date(self, key, inv_date):
        if not rule_engine.is_valid_date(inv_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {inv_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return inv_date



class Country(Base):
    __tablename__ = "country"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    Demo = Column(String)
    country_code = Column(String, nullable=True)
    name = Column(String, nullable=True)
    state = Column(Text)
    region = Column(Text)
    demo1 = Column(Date)
    demo3 = Column(String)
    language = Column(Text, nullable=True)
    demo4 = Column(String)
    demo5 = Column(Text)
    demo6 = Column(Text)
    demo2 = Column(Text)
    demo_8 = Column(Text)
    demo9 = Column(String)
    demo7 = Column(String)
    demo10 = Column(Date)
    demo11 = Column(String)
    country_media = relationship('CountryMedia', back_populates='country', cascade='all, delete-orphan')
    country_post = relationship('CountryPost', back_populates='country', cascade='all, delete-orphan')
    country_post_reaction = relationship('CountryPostReaction', back_populates='country', cascade='all, delete-orphan')

    @validates('demo1')
    def validate_demo1(self, key, demo1):
        if not rule_engine.is_valid_date(demo1, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {demo1}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return demo1

    @validates('demo4')
    def validate_demo4(self, key, demo4):
        if not rule_engine.is_valid_email(demo4):
            raise ValueError(f"Invalid email address: {demo4}")
        return demo4

    @validates('demo10')
    def validate_demo10(self, key, demo10):
        if not rule_engine.is_valid_date(demo10, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {demo10}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return demo10



class CountryMedia(Base):
    __tablename__ = "country_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class CountryPost(Base):
    __tablename__ = "country_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_post')
    post_reaction = relationship('CountryPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class CountryPostReaction(Base):
    __tablename__ = "country_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('country_post.psk_id'))
    post = relationship('CountryPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Users(Base):
    __tablename__ = "users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    firstname = Column(String)
    mobileno = Column(String)
    emailid = Column(String)
    role = Column(String)
    status = Column(String)
    lastname = Column(String)
    password = Column(String)
    username = Column(String)
    users_media = relationship('UsersMedia', back_populates='users', cascade='all, delete-orphan')
    users_post = relationship('UsersPost', back_populates='users', cascade='all, delete-orphan')
    users_post_reaction = relationship('UsersPostReaction', back_populates='users', cascade='all, delete-orphan')



class UsersMedia(Base):
    __tablename__ = "users_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('users.psk_id'))
    users = relationship('Users', back_populates='users_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class UsersPost(Base):
    __tablename__ = "users_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('users.psk_id'))
    users = relationship('Users', back_populates='users_post')
    post_reaction = relationship('UsersPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class UsersPostReaction(Base):
    __tablename__ = "users_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('users.psk_id'))
    users = relationship('Users', back_populates='users_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('users_post.psk_id'))
    post = relationship('UsersPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class MenusHistory(Base):
    __tablename__ = "menus_history"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menuname = Column(String)
    menutype = Column(String)
    menuicon = Column(String)
    status = Column(String)
    menu_seq = Column(String)
    tcode = Column(String)
    menuhref = Column(String)
    menuid = Column(String)
    parentid = Column(String)
    menu_history_id = Column(String)



class ApiStudioAppName(Base):
    __tablename__ = "api_studio_app_name"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    app_id = Column(String)
    used = Column(Boolean)
    type = Column(String, nullable=True)
    name = Column(String)
    api_studio_app_group_id = Column(Integer, ForeignKey('api_studio_app_group.psk_id'))



class SaasApplication(Base):
    __tablename__ = "saas_application"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uuid = Column(String)
    appname = Column(String)
    appid = Column(String)



class Name(Base):
    __tablename__ = "name"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    secur_id = Column(String)
    docid = Column(String, nullable=False)
    docdate = Column(Date)
    add_1 = Column(String, nullable=False)
    name_media = relationship('NameMedia', back_populates='name', cascade='all, delete-orphan')

    @validates('docdate')
    def validate_docdate(self, key, docdate):
        if not rule_engine.is_valid_date(docdate, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {docdate}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return docdate



class NameMedia(Base):
    __tablename__ = "name_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('name.psk_id'))
    name = relationship('Name', back_populates='name_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Kommunityapi(Base):
    __tablename__ = "kommunityapi"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    apihref = Column(String)
    filename = Column(String)
    status = Column(String)
    apiname = Column(String)



class Gmc12040101(Base):
    __tablename__ = "gmc1204_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_type = Column(String)
    mgroup_name = Column(String)
    level_no = Column(Integer)
    ordno = Column(Integer)
    dupcheck = Column(String)
    uuid = Column(String)
    menu_name = Column(String)
    visible = Column(Boolean)



class Gmc12030101(Base):
    __tablename__ = "gmc1203_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uuid = Column(String)
    menu_name = Column(String)
    menu_properties = Column(String)
    previlege_name = Column(String)



class Product(Base):
    __tablename__ = "product"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    qty = Column(Integer)
    name = Column(String)
    description = Column(String)
    price = Column(String)



class Gmc12080101(Base):
    __tablename__ = "gmc1208_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    publickey = Column(String)
    secretekey = Column(String)
    createdby = Column(String)
    encryptedsk = Column(String)
    createdon = Column(String)



class Menus(Base):
    __tablename__ = "menus"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    tcode = Column(String)
    menutype = Column(String)
    menuicon = Column(String)
    parentid = Column(String)
    status = Column(String)
    menu_seq = Column(String)
    menuid = Column(String)
    menuadmin = Column(String)
    menuname = Column(String)
    menuhref = Column(String)



class AssignmenuRoleprivilege(Base):
    __tablename__ = "assignmenu_roleprivilege"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    roleid = Column(String)
    menuid = Column(String)



class Roleprivileges(Base):
    __tablename__ = "roleprivileges"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    status = Column(String)
    rolename = Column(String)
    privilege_name = Column(String)
    roles_id = Column(Integer, ForeignKey('roles.psk_id'))
    rolecode = Column(String)



class Roles(Base):
    __tablename__ = "roles"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    rolename = Column(String)
    roledesc = Column(String)
    status = Column(String)
    roles_media = relationship('RolesMedia', back_populates='roles', cascade='all, delete-orphan')



class RolesMedia(Base):
    __tablename__ = "roles_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('roles.psk_id'))
    roles = relationship('Roles', back_populates='roles_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Gmc12020101(Base):
    __tablename__ = "gmc1202_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    password = Column(String)
    user_type = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    user_groups = Column(String)
    username = Column(String)
    uuid = Column(String)
    first_name = Column(String)

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Si01Advertisement(Base):
    __tablename__ = "si_01_advertisement"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    radio = Column(Float)
    newspaper = Column(Float)
    sales = Column(Float)
    tv = Column(Float)



class NmsAppServiceStatus(Base):
    __tablename__ = "nms_app_service_status"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    service_name = Column(String)
    app_name = Column(String)
    web_server_name = Column(String)
    running_status = Column(String)



class Sc01Post(Base):
    __tablename__ = "sc_01_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    post_date = Column(Date)
    post_ref_no = Column(String)
    post_title = Column(String)
    post_description = Column(Text)
    contact_person = Column(Integer)
    contact_emailid = Column(String)
    contact_mobile = Column(String)
    active = Column(String)
    category = Column(Integer)
    subcategory = Column(Integer)
    uom = Column(Integer)
    department = Column(String)
    contact_persons = Column(String)
    post_qty = Column(Integer)
    post_price = Column(Integer)
    company = Column(Integer, nullable=True)
    post_username = Column(String)
    sc_01_post_media = relationship('Sc01PostMedia', back_populates='sc_01_post', cascade='all, delete-orphan')

    @validates('post_date')
    def validate_post_date(self, key, post_date):
        if not rule_engine.is_valid_date(post_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {post_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return post_date

    @validates('contact_emailid')
    def validate_contact_emailid(self, key, contact_emailid):
        if not rule_engine.is_valid_email(contact_emailid):
            raise ValueError(f"Invalid email address: {contact_emailid}")
        return contact_emailid



class Sc01PostMedia(Base):
    __tablename__ = "sc_01_post_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_post.psk_id'))
    sc_01_post = relationship('Sc01Post', back_populates='sc_01_post_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Sc01Category(Base):
    __tablename__ = "sc_01_category"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    category_name = Column(String)
    active = Column(String)
    category_code = Column(String, unique=True, nullable=False)
    sc_01_category_media = relationship('Sc01CategoryMedia', back_populates='sc_01_category', cascade='all, delete-orphan')



class Sc01CategoryMedia(Base):
    __tablename__ = "sc_01_category_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_category.psk_id'))
    sc_01_category = relationship('Sc01Category', back_populates='sc_01_category_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02010101(Base):
    __tablename__ = "asa0201_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text, nullable=False)
    active = Column(String)
    user_role = Column(String, unique=True, nullable=False)



class Sc01SubCategory(Base):
    __tablename__ = "sc_01_sub_category"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    subcategory_name = Column(String)
    category_name = Column(Integer)
    active = Column(String)
    subcategory_code = Column(String)
    sc_01_sub_category_media = relationship('Sc01SubCategoryMedia', back_populates='sc_01_sub_category', cascade='all, delete-orphan')



class Sc01SubCategoryMedia(Base):
    __tablename__ = "sc_01_sub_category_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_sub_category.psk_id'))
    sc_01_sub_category = relationship('Sc01SubCategory', back_populates='sc_01_sub_category_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class NmsServerLog(Base):
    __tablename__ = "nms_server_log"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    cpu_usage = Column(Integer)
    memory_usage = Column(Integer)
    disk_usage = Column(Integer)
    event_time = Column(Time)

    @validates('event_time')
    def validate_event_time(self, key, event_time):
        if not rule_engine.is_valid_date(event_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {event_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return event_time



class Sc01Company(Base):
    __tablename__ = "sc_01_company"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    company_code = Column(String, unique=True, nullable=False)
    company_name = Column(String)
    company_address = Column(Text)
    active = Column(String)
    company_emailid = Column(String, nullable=True)

    @validates('company_emailid')
    def validate_company_emailid(self, key, company_emailid):
        if not rule_engine.is_valid_email(company_emailid):
            raise ValueError(f"Invalid email address: {company_emailid}")
        return company_emailid



class Sc01Uom(Base):
    __tablename__ = "sc_01_uom"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uom_code = Column(String, unique=True, nullable=False)
    active = Column(String, nullable=False)
    uom_name = Column(String, nullable=False)



class Si01Predictions(Base):
    __tablename__ = "si_01_predictions"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    predicted = Column(Float, nullable=True)
    character = Column(Float, nullable=True)
    advertise_medium = Column(String, nullable=True)
    actual = Column(Float, nullable=True)
    advertise_mediums = Column(Float, nullable=True)



class Sc01WebsiteSettings(Base):
    __tablename__ = "sc_01_website_settings"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favi_icon = Column(String)
    applicaton_name = Column(String)
    application_url = Column(String)
    sc_01_website_settings_media = relationship('Sc01WebsiteSettingsMedia', back_populates='sc_01_website_settings', cascade='all, delete-orphan')



class Sc01WebsiteSettingsMedia(Base):
    __tablename__ = "sc_01_website_settings_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_website_settings.psk_id'))
    sc_01_website_settings = relationship('Sc01WebsiteSettings', back_populates='sc_01_website_settings_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02040101(Base):
    __tablename__ = "asa0204_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String, nullable=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    reporting_to = Column(String, nullable=True)
    password = Column(String, nullable=False)
    user_roles = Column(Text, nullable=False)
    user_type = Column(Text, nullable=False)
    home_menu = Column(Text, nullable=True)
    active = Column(Boolean)
    first_name = Column(String, nullable=False)
    asa0204_01_01_media = relationship('Asa02040101Media', back_populates='asa0204_01_01', cascade='all, delete-orphan')
    asa0204_01_01_post = relationship('Asa02040101Post', back_populates='asa0204_01_01', cascade='all, delete-orphan')
    asa0204_01_01_post_reaction = relationship('Asa02040101PostReaction', back_populates='asa0204_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa02040101Media(Base):
    __tablename__ = "asa0204_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02040101Post(Base):
    __tablename__ = "asa0204_01_01_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_post')
    post_reaction = relationship('Asa02040101PostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02040101PostReaction(Base):
    __tablename__ = "asa0204_01_01_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('asa0204_01_01_post.psk_id'))
    post = relationship('Asa02040101Post', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class ApiStudioAppWebconfig(Base):
    __tablename__ = "api_studio_app_webconfig"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favicon_name = Column(String, nullable=False)
    app_name = Column(String)
    api_studio_app_webconfig_media = relationship('ApiStudioAppWebconfigMedia', back_populates='api_studio_app_webconfig', cascade='all, delete-orphan')



class ApiStudioAppWebconfigMedia(Base):
    __tablename__ = "api_studio_app_webconfig_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_studio_app_webconfig.psk_id'))
    api_studio_app_webconfig = relationship('ApiStudioAppWebconfig', back_populates='api_studio_app_webconfig_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Sc01CompanyUsers(Base):
    __tablename__ = "sc_01_company_users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    contact_person = Column(String)
    contact_mobile = Column(String)
    contact_department = Column(String)
    sc_01_company_id = Column(Integer, ForeignKey('sc_01_company.psk_id'))
    contact_emailid = Column(String)
    user_post = Column(String)
    sc_01_company_users_media = relationship('Sc01CompanyUsersMedia', back_populates='sc_01_company_users', cascade='all, delete-orphan')

    @validates('contact_emailid')
    def validate_contact_emailid(self, key, contact_emailid):
        if not rule_engine.is_valid_email(contact_emailid):
            raise ValueError(f"Invalid email address: {contact_emailid}")
        return contact_emailid



class Sc01CompanyUsersMedia(Base):
    __tablename__ = "sc_01_company_users_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_company_users.psk_id'))
    sc_01_company_users = relationship('Sc01CompanyUsers', back_populates='sc_01_company_users_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Si01Predict(Base):
    __tablename__ = "si_01_predict"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    predicted = Column(Float, nullable=True)
    actual = Column(Float, nullable=True)
    advertise_medium = Column(String, nullable=True)
    si_01_predict_media = relationship('Si01PredictMedia', back_populates='si_01_predict', cascade='all, delete-orphan')
    si_01_predict_post = relationship('Si01PredictPost', back_populates='si_01_predict', cascade='all, delete-orphan')
    si_01_predict_post_reaction = relationship('Si01PredictPostReaction', back_populates='si_01_predict', cascade='all, delete-orphan')



class Si01PredictMedia(Base):
    __tablename__ = "si_01_predict_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('si_01_predict.psk_id'))
    si_01_predict = relationship('Si01Predict', back_populates='si_01_predict_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Si01PredictPost(Base):
    __tablename__ = "si_01_predict_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('si_01_predict.psk_id'))
    si_01_predict = relationship('Si01Predict', back_populates='si_01_predict_post')
    post_reaction = relationship('Si01PredictPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Si01PredictPostReaction(Base):
    __tablename__ = "si_01_predict_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('si_01_predict.psk_id'))
    si_01_predict = relationship('Si01Predict', back_populates='si_01_predict_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('si_01_predict_post.psk_id'))
    post = relationship('Si01PredictPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Sc01LoginUsers(Base):
    __tablename__ = "sc_01_login_users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    nickname = Column(String)
    company = Column(Integer)
    username = Column(String)
    password = Column(String)
    emailid = Column(String)
    active = Column(Boolean)
    mobileno = Column(String)
    user_role = Column(String)



class Sc01SequenceNo(Base):
    __tablename__ = "sc_01_sequence_no"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uuid_description = Column(String, nullable=False)
    active = Column(Boolean)
    lastno = Column(Integer, nullable=False)
    prefix = Column(String, nullable=False)
    uuid = Column(String, nullable=False)



class ApiStudioAppGroup(Base):
    __tablename__ = "api_studio_app_group"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    name = Column(String)
    group_id = Column(String)
    child = Column(Boolean)
    parent_id = Column(Integer, nullable=True)
    api_studio_app_group_media = relationship('ApiStudioAppGroupMedia', back_populates='api_studio_app_group', cascade='all, delete-orphan')
    api_studio_app_group_post = relationship('ApiStudioAppGroupPost', back_populates='api_studio_app_group', cascade='all, delete-orphan')
    api_studio_app_group_post_reaction = relationship('ApiStudioAppGroupPostReaction', back_populates='api_studio_app_group', cascade='all, delete-orphan')



class ApiStudioAppGroupMedia(Base):
    __tablename__ = "api_studio_app_group_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_studio_app_group.psk_id'))
    api_studio_app_group = relationship('ApiStudioAppGroup', back_populates='api_studio_app_group_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class ApiStudioAppGroupPost(Base):
    __tablename__ = "api_studio_app_group_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_studio_app_group.psk_id'))
    api_studio_app_group = relationship('ApiStudioAppGroup', back_populates='api_studio_app_group_post')
    post_reaction = relationship('ApiStudioAppGroupPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class ApiStudioAppGroupPostReaction(Base):
    __tablename__ = "api_studio_app_group_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_studio_app_group.psk_id'))
    api_studio_app_group = relationship('ApiStudioAppGroup', back_populates='api_studio_app_group_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('api_studio_app_group_post.psk_id'))
    post = relationship('ApiStudioAppGroupPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class ApiHcasOnlinepayment(Base):
    __tablename__ = "api_hcas_onlinepayment"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    json_payload = Column(Text)
    uuid = Column(String)
    active = Column(Boolean)
    api_hcas_onlinepayment_media = relationship('ApiHcasOnlinepaymentMedia', back_populates='api_hcas_onlinepayment', cascade='all, delete-orphan')
    api_hcas_onlinepayment_post = relationship('ApiHcasOnlinepaymentPost', back_populates='api_hcas_onlinepayment', cascade='all, delete-orphan')
    api_hcas_onlinepayment_post_reaction = relationship('ApiHcasOnlinepaymentPostReaction', back_populates='api_hcas_onlinepayment', cascade='all, delete-orphan')



class ApiHcasOnlinepaymentMedia(Base):
    __tablename__ = "api_hcas_onlinepayment_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_hcas_onlinepayment.psk_id'))
    api_hcas_onlinepayment = relationship('ApiHcasOnlinepayment', back_populates='api_hcas_onlinepayment_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class ApiHcasOnlinepaymentPost(Base):
    __tablename__ = "api_hcas_onlinepayment_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_hcas_onlinepayment.psk_id'))
    api_hcas_onlinepayment = relationship('ApiHcasOnlinepayment', back_populates='api_hcas_onlinepayment_post')
    post_reaction = relationship('ApiHcasOnlinepaymentPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class ApiHcasOnlinepaymentPostReaction(Base):
    __tablename__ = "api_hcas_onlinepayment_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('api_hcas_onlinepayment.psk_id'))
    api_hcas_onlinepayment = relationship('ApiHcasOnlinepayment', back_populates='api_hcas_onlinepayment_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('api_hcas_onlinepayment_post.psk_id'))
    post = relationship('ApiHcasOnlinepaymentPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Asa02030101(Base):
    __tablename__ = "asa0203_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String, nullable=True)
    menu_privilege_name = Column(String, unique=True, nullable=False)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class Asa02050101(Base):
    __tablename__ = "asa0205_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text, nullable=False)
    menu_items = Column(Text, nullable=False)
    user_privilege_name = Column(String, nullable=False)



class ApiStudioAppPasswordResetTokens(Base):
    __tablename__ = "api_studio_app_password_reset_tokens"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    username = Column(String)
    token = Column(String)
    token_expiry = Column(Integer)
    used = Column(Boolean)



class CustomerPoojaDetails(Base):
    __tablename__ = "customer_pooja_details"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    customer_name = Column(String, unique=True, nullable=False)
    customer_mail = Column(String, unique=True, nullable=False)
    customer_whatsapp = Column(String, unique=True, nullable=False)
    pooja_name = Column(String, nullable=True)
    relationship = Column(String, nullable=True)
    gender = Column(String, nullable=True)
    gothram = Column(String, nullable=True)
    nakshathram = Column(String, nullable=True)
    soothram = Column(String, nullable=True)
    thithi_day = Column(String, nullable=True)
    thithi_day_specfic = Column(Date, nullable=True)

    @validates('thithi_day_specfic')
    def validate_thithi_day_specfic(self, key, thithi_day_specfic):
        if not rule_engine.is_valid_date(thithi_day_specfic, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {thithi_day_specfic}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return thithi_day_specfic



class Asa05020101(Base):
    __tablename__ = "asa0502_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_name = Column(String)
    menu_psk_uid = Column(String)
    menu_icon = Column(String)
    menu_href = Column(String)
    menu_psk_id = Column(Integer)
    menu_order = Column(Integer)
    active = Column(String)
    menu_uid = Column(String)
    menu_parent_id = Column(Integer)
    menu_type = Column(String)
    menu_app_bar = Column(String)
    menu_level = Column(Integer)
    menu_code = Column(Text)



class Asa05030101(Base):
    __tablename__ = "asa0503_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String)
    menu_privilege_name = Column(String)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class Asa02020101(Base):
    __tablename__ = "asa0202_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_name = Column(String, unique=True, nullable=False)
    menu_psk_uid = Column(String, nullable=True)
    menu_icon = Column(String, nullable=True)
    menu_href = Column(String, nullable=True)
    menu_psk_id = Column(Integer, nullable=True)
    menu_order = Column(Integer, nullable=True)
    active = Column(String, nullable=True)
    menu_uid = Column(String, unique=True, nullable=False)
    menu_parent_id = Column(Integer, nullable=True)
    menu_code = Column(Text, nullable=True)
    menu_type = Column(String, nullable=True)
    menu_app_bar = Column(String, nullable=True)
    menu_level = Column(Integer, nullable=True)
    string = Column(String)
    asa0202_01_01_media = relationship('Asa02020101Media', back_populates='asa0202_01_01', cascade='all, delete-orphan')



class Asa02020101Media(Base):
    __tablename__ = "asa0202_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0202_01_01.psk_id'))
    asa0202_01_01 = relationship('Asa02020101', back_populates='asa0202_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Gmc12010101(Base):
    __tablename__ = "gmc1201_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_group_type = Column(String)
    user_group_name = Column(String)
    active = Column(String)
    dupcheck = Column(String)
    uuid = Column(String)
    user_privilege = Column(String)



class Asa05050101(Base):
    __tablename__ = "asa0505_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text)
    menu_items = Column(Text)
    user_privilege_name = Column(String)



class Asa06050101(Base):
    __tablename__ = "asa0605_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text)
    menu_items = Column(Text)
    user_privilege_name = Column(String)



class Svv02UserAuthentication03(Base):
    __tablename__ = "svv02_user_authentication_03"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    member_id = Column(Integer)
    auth_token = Column(String, nullable=True)
    expiry_date = Column(Date, nullable=True)

    @validates('expiry_date')
    def validate_expiry_date(self, key, expiry_date):
        if not rule_engine.is_valid_date(expiry_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {expiry_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return expiry_date



class Svv02UserDevice02(Base):
    __tablename__ = "svv02_user_device_02"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    device_otp_type = Column(String, nullable=True)
    member_id = Column(Integer, unique=True, nullable=False)
    device_id = Column(String, nullable=True)
    device_platform = Column(String)
    device_version = Column(String, nullable=True)
    device_otp = Column(String)
    device_otp_duration = Column(String)



class Svv02UserPayments08(Base):
    __tablename__ = "svv02_user_payments_08"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    member_id = Column(Integer, nullable=True)
    amount = Column(Float, nullable=True)
    payment_date = Column(Date, nullable=True)
    payment_method = Column(String, nullable=True)
    payment_description = Column(Text, nullable=True)

    @validates('payment_date')
    def validate_payment_date(self, key, payment_date):
        if not rule_engine.is_valid_date(payment_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {payment_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return payment_date



class Asa08020101(Base):
    __tablename__ = "asa0802_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_level = Column(Integer)
    menu_code = Column(Text)
    menu_name = Column(String)
    menu_psk_uid = Column(String)
    menu_icon = Column(String)
    menu_href = Column(String)
    menu_psk_id = Column(Integer)
    menu_order = Column(Integer)
    active = Column(String)
    menu_uid = Column(String)
    menu_parent_id = Column(Integer)
    menu_type = Column(String)
    menu_app_bar = Column(String)



class Asa08030101(Base):
    __tablename__ = "asa0803_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String)
    menu_privilege_name = Column(String)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class Asa08050101(Base):
    __tablename__ = "asa0805_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text)
    menu_items = Column(Text)
    user_privilege_name = Column(String)



class Naac01NumberOfWorkshopConductedDc1(Base):
    __tablename__ = "naac01_number_of_workshop_conducted_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    name_of_the_workshop = Column(String, nullable=True)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    number_of_participants = Column(Integer, nullable=True)
    duration_from = Column(Date)
    duration_to = Column(Date, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_number_of_workshop_conducted_dc1_media = relationship('Naac01NumberOfWorkshopConductedDc1Media', back_populates='naac01_number_of_workshop_conducted_dc1', cascade='all, delete-orphan')

    @validates('duration_from')
    def validate_duration_from(self, key, duration_from):
        if not rule_engine.is_valid_date(duration_from, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {duration_from}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return duration_from

    @validates('duration_to')
    def validate_duration_to(self, key, duration_to):
        if not rule_engine.is_valid_date(duration_to, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {duration_to}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return duration_to



class Naac01NumberOfWorkshopConductedDc1Media(Base):
    __tablename__ = "naac01_number_of_workshop_conducted_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_number_of_workshop_conducted_dc1.psk_id'))
    naac01_number_of_workshop_conducted_dc1 = relationship('Naac01NumberOfWorkshopConductedDc1', back_populates='naac01_number_of_workshop_conducted_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01FacultyParticipationDc2(Base):
    __tablename__ = "naac01_faculty_participation_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    design_development_addon = Column(String, nullable=True)
    board_university_college_name = Column(String, nullable=True)
    conference_name = Column(String, nullable=True)
    certificate_course = Column(String, nullable=True)
    seminar_name = Column(String, nullable=True)
    eval_university_college_name = Column(String, nullable=True)
    qp_university_college_name = Column(String, nullable=True)
    conference_university_college_name = Column(String, nullable=True)
    design_development_university_college_name = Column(String, nullable=True)
    certificate_university_college_name = Column(String, nullable=True)
    external_examiner_university_college_name = Column(String, nullable=True)
    seminar_university_college_name = Column(String, nullable=True)
    workshop_university_college_name = Column(String, nullable=True)
    workshop_name = Column(String, nullable=True)
    board_designation = Column(String, nullable=True)
    qp_subject = Column(String, nullable=True)
    eval_subject = Column(String, nullable=True)
    naac01_faculty_participation_dc2_media = relationship('Naac01FacultyParticipationDc2Media', back_populates='naac01_faculty_participation_dc2', cascade='all, delete-orphan')



class Naac01FacultyParticipationDc2Media(Base):
    __tablename__ = "naac01_faculty_participation_dc2_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_faculty_participation_dc2.psk_id'))
    naac01_faculty_participation_dc2 = relationship('Naac01FacultyParticipationDc2', back_populates='naac01_faculty_participation_dc2_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01ResearchArticlePublicationDc2(Base):
    __tablename__ = "naac01_research_article_publication_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)




class Naac01GovernmentGrantsDc1(Base):
    __tablename__ = "naac01_government_grants_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    project_name = Column(String, nullable=True)
    name_of_principal_investigator = Column(String, nullable=True)
    department_of_principal_investigator = Column(String, nullable=True)
    year_of_award = Column(String, nullable=True)
    amount_sanctioned = Column(Float, nullable=True)
    duration_start_date = Column(Date, nullable=True)
    duration_end_date = Column(Date, nullable=True)
    name_of_funding_agency = Column(String, nullable=True)
    government_type = Column(String)
    staff_id = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    naac01_government_grants_dc1_media = relationship('Naac01GovernmentGrantsDc1Media', back_populates='naac01_government_grants_dc1', cascade='all, delete-orphan')

    @validates('duration_start_date')
    def validate_duration_start_date(self, key, duration_start_date):
        if not rule_engine.is_valid_date(duration_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {duration_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return duration_start_date

    @validates('duration_end_date')
    def validate_duration_end_date(self, key, duration_end_date):
        if not rule_engine.is_valid_date(duration_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {duration_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return duration_end_date



class Naac01GovernmentGrantsDc1Media(Base):
    __tablename__ = "naac01_government_grants_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_government_grants_dc1.psk_id'))
    naac01_government_grants_dc1 = relationship('Naac01GovernmentGrantsDc1', back_populates='naac01_government_grants_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01ResearchArticlePublicationDc1(Base):
    __tablename__ = "naac01_research_article_publication_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    paper_title = Column(String, nullable=True)
    author_name = Column(String, nullable=True)
    journal_name = Column(String, nullable=True)
    publication_year = Column(Integer, nullable=True)
    issn_number = Column(String, nullable=True)
    ugc_recognition_link = Column(String, nullable=True)
    issue_date = Column(Date, nullable=True)
    journal_nature = Column(String, nullable=True)
    department_id = Column(Integer, nullable=True)
    staff_id = Column(Integer, nullable=True)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    employee_id = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    naac01_research_article_publication_dc1_media = relationship('Naac01ResearchArticlePublicationDc1Media', back_populates='naac01_research_article_publication_dc1', cascade='all, delete-orphan')

    @validates('issue_date')
    def validate_issue_date(self, key, issue_date):
        if not rule_engine.is_valid_date(issue_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {issue_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return issue_date



class Naac01ResearchArticlePublicationDc1Media(Base):
    __tablename__ = "naac01_research_article_publication_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_research_article_publication_dc1.psk_id'))
    naac01_research_article_publication_dc1 = relationship('Naac01ResearchArticlePublicationDc1', back_populates='naac01_research_article_publication_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01FacultyParticipationDc1(Base):
    __tablename__ = "naac01_faculty_participation_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    participation = Column(Text, nullable=True)
    name = Column(String, nullable=True)
    year = Column(Integer, nullable=True)
    department = Column(String, nullable=True)
    stf_name = Column(String, nullable=True)
    stf_id = Column(String, nullable=True)
    depcode = Column(String, nullable=True)



class Svv02UserSettings04(Base):
    __tablename__ = "svv02_user_settings_04"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    web_notifications = Column(Boolean)
    member_id = Column(Integer, nullable=True)
    privacy_level = Column(String, nullable=True)
    mobile_notifications = Column(Boolean)
    location_services = Column(Boolean)
    language_preference = Column(String, nullable=True)
    theme_preference = Column(String, nullable=True)



class Asa06010101(Base):
    __tablename__ = "asa0601_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text)
    active = Column(String)
    user_role = Column(String)
    user_dashboard_url = Column(String)
    user_dashboard_name = Column(String)



class Svv02UserSubscriptions07(Base):
    __tablename__ = "svv02_user_subscriptions_07"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    member_id = Column(Integer)
    plan_code = Column(Integer, nullable=True)
    start_date = Column(Date, nullable=True)
    end_date = Column(Date, nullable=True)
    status = Column(Boolean)
    payment_status = Column(Boolean)
    order_status = Column(String, nullable=True)

    @validates('start_date')
    def validate_start_date(self, key, start_date):
        if not rule_engine.is_valid_date(start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return start_date

    @validates('end_date')
    def validate_end_date(self, key, end_date):
        if not rule_engine.is_valid_date(end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return end_date



class Asa06070101(Base):
    __tablename__ = "asa0607_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favi_icon = Column(String)
    home_page_url = Column(String)
    favicon_name = Column(String)
    application_url = Column(String)
    applicaton_name = Column(String)
    home_page_name = Column(String, nullable=True)
    application_root_folder = Column(String)
    application_name = Column(String, nullable=True)
    asa0607_01_01_media = relationship('Asa06070101Media', back_populates='asa0607_01_01', cascade='all, delete-orphan')



class Asa06070101Media(Base):
    __tablename__ = "asa0607_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0607_01_01.psk_id'))
    asa0607_01_01 = relationship('Asa06070101', back_populates='asa0607_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa06020101(Base):
    __tablename__ = "asa0602_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_name = Column(String)
    menu_psk_uid = Column(String)
    menu_icon = Column(String)
    menu_href = Column(String)
    menu_psk_id = Column(Integer)
    menu_order = Column(Integer)
    active = Column(String)
    menu_uid = Column(String)
    menu_parent_id = Column(Integer)
    menu_type = Column(String)
    menu_app_bar = Column(String)
    menu_level = Column(Integer)
    menu_code = Column(Text)



class Asa05040101(Base):
    __tablename__ = "asa0504_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String)
    username = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    password = Column(String)
    user_roles = Column(Text)
    home_menu = Column(Text)
    active = Column(Boolean)
    first_name = Column(String)
    user_type = Column(Text)
    user_dashboard = Column(Text, nullable=True)
    asa0504_01_01_media = relationship('Asa05040101Media', back_populates='asa0504_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa05040101Media(Base):
    __tablename__ = "asa0504_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0504_01_01.psk_id'))
    asa0504_01_01 = relationship('Asa05040101', back_populates='asa0504_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa06030101(Base):
    __tablename__ = "asa0603_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String)
    menu_privilege_name = Column(String)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class Asa05010101(Base):
    __tablename__ = "asa0501_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text)
    active = Column(String)
    user_role = Column(String)
    user_dashboard_url = Column(String, nullable=True)
    user_dashboard_name = Column(String, nullable=True)



class Asa08010101(Base):
    __tablename__ = "asa0801_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text)
    active = Column(String)
    user_role = Column(String)
    user_dashboard_name = Column(String, nullable=True)
    user_dashboard_url = Column(String)



class Svv03AstrologersMaster02(Base):
    __tablename__ = "svv03_astrologers_master_02"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    astrologer_id = Column(Integer, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    email = Column(String)
    phone_number = Column(String)
    birthdate = Column(Date, nullable=True)
    specialty = Column(Text, nullable=True)
    experience_years = Column(Integer, nullable=True)
    biodata = Column(Text, nullable=True)
    rating = Column(Float, nullable=True)

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email

    @validates('birthdate')
    def validate_birthdate(self, key, birthdate):
        if not rule_engine.is_valid_date(birthdate, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {birthdate}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return birthdate



class Svv03AstrologyServicesMaster03(Base):
    __tablename__ = "svv03_astrology_services_master_03"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    astro_service_cost = Column(Float, nullable=True)
    astro_service_name = Column(String)
    astro_service_description = Column(Text, nullable=True)
    astro_service_id = Column(Integer, nullable=True)
    astro_service_duration = Column(String, nullable=True)
    astro_available = Column(Boolean)



class Naac01ProjectWorkDc2(Base):
    __tablename__ = "naac01_project_work_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    pro_course_code = Column(String, nullable=True)
    field_course_code = Column(String, nullable=True)
    intern_course_code = Column(String, nullable=True)
    pro_department_code = Column(String, nullable=True)
    field_department_code = Column(String, nullable=True)
    intern_department_code = Column(String, nullable=True)
    pro_department_name = Column(String, nullable=True)
    field_department_name = Column(String, nullable=True)
    intern_department_name = Column(String, nullable=True)
    pro_name_of_students_studied = Column(String, nullable=True)
    field_name_of_students_studied = Column(String, nullable=True)
    intern_name_of_students_studied = Column(String, nullable=True)
    pro_name_of_the_course = Column(String, nullable=True)
    field_name_of_the_course = Column(String, nullable=True)
    intern_name_of_the_course = Column(String, nullable=True)
    pro_program_code = Column(String, nullable=True)
    field_program_code = Column(String, nullable=True)
    intern_program_code = Column(String, nullable=True)
    pro_year_of_offering = Column(String, nullable=True)
    field_year_of_offering = Column(String, nullable=True)
    intern_year_of_offering = Column(String, nullable=True)
    naac01_project_work_dc2_media = relationship('Naac01ProjectWorkDc2Media', back_populates='naac01_project_work_dc2', cascade='all, delete-orphan')



class Naac01ProjectWorkDc2Media(Base):
    __tablename__ = "naac01_project_work_dc2_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_project_work_dc2.psk_id'))
    naac01_project_work_dc2 = relationship('Naac01ProjectWorkDc2', back_populates='naac01_project_work_dc2_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa06040101(Base):
    __tablename__ = "asa0604_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String)
    username = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    password = Column(String)
    user_roles = Column(Text)
    home_menu = Column(Text)
    active = Column(Boolean)
    first_name = Column(String)
    user_dashboard = Column(Text)
    user_type = Column(Text)
    asa0604_01_01_media = relationship('Asa06040101Media', back_populates='asa0604_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa06040101Media(Base):
    __tablename__ = "asa0604_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0604_01_01.psk_id'))
    asa0604_01_01 = relationship('Asa06040101', back_populates='asa0604_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class PykitWebsiteSettings(Base):
    __tablename__ = "pykit_website_settings"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    application_url = Column(String, nullable=True)
    favi_icon = Column(String, nullable=True)
    applicaton_name = Column(String)
    home_page_url = Column(String, nullable=True)
    favicon_name = Column(String, nullable=True)
    home_page_name = Column(String, nullable=True)
    application_name = Column(String, nullable=True)
    application_root_folder = Column(String, nullable=True)
    pykit_website_settings_media = relationship('PykitWebsiteSettingsMedia', back_populates='pykit_website_settings', cascade='all, delete-orphan')



class PykitWebsiteSettingsMedia(Base):
    __tablename__ = "pykit_website_settings_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('pykit_website_settings.psk_id'))
    pykit_website_settings = relationship('PykitWebsiteSettings', back_populates='pykit_website_settings_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa08040101(Base):
    __tablename__ = "asa0804_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String)
    username = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    password = Column(String)
    user_roles = Column(Text)
    home_menu = Column(Text)
    active = Column(Boolean)
    first_name = Column(String)
    user_type = Column(Text)
    user_dashboard = Column(Text, nullable=True)
    asa0804_01_01_media = relationship('Asa08040101Media', back_populates='asa0804_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa08040101Media(Base):
    __tablename__ = "asa0804_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0804_01_01.psk_id'))
    asa0804_01_01 = relationship('Asa08040101', back_populates='asa0804_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01StudentsBenefitedExamGuidanceDc1(Base):
    __tablename__ = "naac01_students_benefited_exam_guidance_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    year_of_activity = Column(Date, nullable=True)
    name_of_the_activity = Column(String, nullable=True)
    number_of_students_attended = Column(Integer, nullable=True)
    number_of_students_placed = Column(Integer, nullable=True)
    staff_id = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    naac01_students_benefited_exam_guidance_dc1_media = relationship('Naac01StudentsBenefitedExamGuidanceDc1Media', back_populates='naac01_students_benefited_exam_guidance_dc1', cascade='all, delete-orphan')

    @validates('year_of_activity')
    def validate_year_of_activity(self, key, year_of_activity):
        if not rule_engine.is_valid_date(year_of_activity, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {year_of_activity}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return year_of_activity



class Naac01StudentsBenefitedExamGuidanceDc1Media(Base):
    __tablename__ = "naac01_students_benefited_exam_guidance_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_students_benefited_exam_guidance_dc1.psk_id'))
    naac01_students_benefited_exam_guidance_dc1 = relationship('Naac01StudentsBenefitedExamGuidanceDc1', back_populates='naac01_students_benefited_exam_guidance_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv03DailyAstrologyServices05(Base):
    __tablename__ = "svv03_daily_astrology_services_05"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    das_language_name = Column(String, nullable=True)
    das_display_date = Column(Date)
    das_language_day = Column(Integer, nullable=True)
    das_language_month = Column(String, nullable=True)
    das_good_time = Column(String, nullable=True)
    das_bad_time = Column(String, nullable=True)
    das_language_zodiac = Column(String, nullable=True)
    das_short_description = Column(String, nullable=True)
    das_long_description = Column(Text, nullable=True)
    das_language_star = Column(String, nullable=True)
    das_external_url = Column(Text, nullable=True)

    @validates('das_display_date')
    def validate_das_display_date(self, key, das_display_date):
        if not rule_engine.is_valid_date(das_display_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {das_display_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return das_display_date



class Svv02SubscriptionPlans06(Base):
    __tablename__ = "svv02_subscription_plans_06"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    lifetime_cost = Column(Float, nullable=True)
    plan_code = Column(Integer)
    plan_name = Column(String, nullable=True)
    plan_description = Column(Text, nullable=True)
    monthly_cost = Column(Float, nullable=True)
    annual_cost = Column(Float, nullable=True)
    onetime_cost = Column(Float, nullable=True)
    annual_usd = Column(Float, nullable=True)
    lifetime_usd = Column(Float, nullable=True)
    monthly_usd = Column(Float, nullable=True)
    onetime_usd = Column(Float, nullable=True)



class Naac01AddOnCertificateDc1(Base):
    __tablename__ = "naac01_add_on_certificate_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    students_completed = Column(Integer, nullable=True)
    department = Column(String)
    programs_offered = Column(String, nullable=True)
    course_code = Column(String, nullable=True)
    year_of_offering = Column(String, nullable=True)
    times_offered_in_year = Column(Integer, nullable=True)
    course_duration = Column(Integer, nullable=True)
    students_enrolled = Column(Integer)
    department_code = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_add_on_certificate_dc1_media = relationship('Naac01AddOnCertificateDc1Media', back_populates='naac01_add_on_certificate_dc1', cascade='all, delete-orphan')



class Naac01AddOnCertificateDc1Media(Base):
    __tablename__ = "naac01_add_on_certificate_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_add_on_certificate_dc1.psk_id'))
    naac01_add_on_certificate_dc1 = relationship('Naac01AddOnCertificateDc1', back_populates='naac01_add_on_certificate_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv02UserLocation05(Base):
    __tablename__ = "svv02_user_location_05"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    member_id = Column(Integer, nullable=True)
    loc_address = Column(Text, nullable=True)
    loc_city = Column(String, nullable=True)
    loc_state = Column(String, nullable=True)
    loc_country = Column(String, nullable=True)
    loc_postal_code = Column(String, nullable=True)
    loc_default = Column(Boolean)



class Svv02UserMaster01(Base):
    __tablename__ = "svv02_user_master_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    middlename = Column(String)
    mobile = Column(String)
    username = Column(String, nullable=True)
    firstname = Column(String, nullable=True)
    lastname = Column(String, nullable=True)
    password_hash = Column(String)
    registered_on = Column(Date)
    user_intro = Column(Text, nullable=True)
    user_profile = Column(Text, nullable=True)
    email = Column(String)
    user_dob = Column(Date, nullable=True)
    user_gender = Column(Text, nullable=False)
    user_bio = Column(Text, nullable=True)
    auth_token = Column(String, nullable=True)
    expiry_date = Column(Date)
    member_id = Column(Integer, unique=True, nullable=False)
    member_type = Column(Text, nullable=True)
    user_father_name = Column(String, nullable=True)
    user_spouse_name = Column(String, nullable=True)
    user_marital_status = Column(Boolean)
    user_kyc = Column(Text, nullable=True)
    user_address = Column(String)
    user_marital_type = Column(String, nullable=True)
    svv02_user_master_01_media = relationship('Svv02UserMaster01Media', back_populates='svv02_user_master_01', cascade='all, delete-orphan')
    svv02_user_master_01_post = relationship('Svv02UserMaster01Post', back_populates='svv02_user_master_01', cascade='all, delete-orphan')
    svv02_user_master_01_post_reaction = relationship('Svv02UserMaster01PostReaction', back_populates='svv02_user_master_01', cascade='all, delete-orphan')

    @validates('registered_on')
    def validate_registered_on(self, key, registered_on):
        if not rule_engine.is_valid_date(registered_on, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {registered_on}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return registered_on

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email

    @validates('user_dob')
    def validate_user_dob(self, key, user_dob):
        if not rule_engine.is_valid_date(user_dob, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {user_dob}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return user_dob

    @validates('expiry_date')
    def validate_expiry_date(self, key, expiry_date):
        if not rule_engine.is_valid_date(expiry_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {expiry_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return expiry_date



class Svv02UserMaster01Media(Base):
    __tablename__ = "svv02_user_master_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv02_user_master_01.psk_id'))
    svv02_user_master_01 = relationship('Svv02UserMaster01', back_populates='svv02_user_master_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv02UserMaster01Post(Base):
    __tablename__ = "svv02_user_master_01_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv02_user_master_01.psk_id'))
    svv02_user_master_01 = relationship('Svv02UserMaster01', back_populates='svv02_user_master_01_post')
    post_reaction = relationship('Svv02UserMaster01PostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv02UserMaster01PostReaction(Base):
    __tablename__ = "svv02_user_master_01_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv02_user_master_01.psk_id'))
    svv02_user_master_01 = relationship('Svv02UserMaster01', back_populates='svv02_user_master_01_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('svv02_user_master_01_post.psk_id'))
    post = relationship('Svv02UserMaster01Post', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Naac01BooksAndChapterDc1(Base):
    __tablename__ = "naac01_books_and_chapter_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    title_of_book_or_chapter = Column(String, nullable=True)
    publication_type = Column(Text)
    title_of_paper = Column(String, nullable=True)
    title_of_proceedings = Column(String, nullable=True)
    name_of_conference = Column(String, nullable=True)
    year_of_publication = Column(String, nullable=True)
    national_or_international = Column(Text, nullable=True)
    isbn_or_issn_number = Column(String, nullable=True)
    affiliating_institute = Column(String, nullable=True)
    name_of_the_publisher = Column(String, nullable=True)
    department_name = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_books_and_chapter_dc1_media = relationship('Naac01BooksAndChapterDc1Media', back_populates='naac01_books_and_chapter_dc1', cascade='all, delete-orphan')



class Naac01BooksAndChapterDc1Media(Base):
    __tablename__ = "naac01_books_and_chapter_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_books_and_chapter_dc1.psk_id'))
    naac01_books_and_chapter_dc1 = relationship('Naac01BooksAndChapterDc1', back_populates='naac01_books_and_chapter_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01ProjectWorkDc1(Base):
    __tablename__ = "naac01_project_work_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    pro_department_code = Column(String)
    pro_course_code = Column(String)
    pro_department_name = Column(String)
    course_name = Column(Text)
    pro_program_code = Column(String)
    pro_name_of_the_course = Column(String)
    field_course_code = Column(String)
    intern_course_code = Column(String)
    field_department_code = Column(String)
    intern_department_code = Column(String)
    field_department_name = Column(String)
    pro_year_of_offering = Column(String, nullable=True)
    pro_name_of_students_studied = Column(String, nullable=True)
    field_name_of_students_studied = Column(String, nullable=True)
    intern_name_of_students_studied = Column(String, nullable=True)
    field_name_of_the_course = Column(String, nullable=True)
    intern_name_of_the_course = Column(String, nullable=True)
    field_program_code = Column(String)
    intern_program_code = Column(String)
    field_year_of_offering = Column(String, nullable=True)
    intern_year_of_offering = Column(String, nullable=True)
    intern_department_name = Column(String)
    department_name = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    department = Column(String, nullable=True)
    stf_name = Column(String, nullable=True)
    stf_id = Column(Integer, nullable=True)
    naac01_project_work_dc1_media = relationship('Naac01ProjectWorkDc1Media', back_populates='naac01_project_work_dc1', cascade='all, delete-orphan')



class Naac01ProjectWorkDc1Media(Base):
    __tablename__ = "naac01_project_work_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_project_work_dc1.psk_id'))
    naac01_project_work_dc1 = relationship('Naac01ProjectWorkDc1', back_populates='naac01_project_work_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa08070101(Base):
    __tablename__ = "asa0807_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    application_url = Column(String)
    favi_icon = Column(String)
    applicaton_name = Column(String)
    home_page_url = Column(String, nullable=True)
    favicon_name = Column(String, nullable=True)
    home_page_name = Column(String, nullable=True)
    application_name = Column(String, nullable=True)
    application_root_folder = Column(String, nullable=True)
    asa0807_01_01_media = relationship('Asa08070101Media', back_populates='asa0807_01_01', cascade='all, delete-orphan')



class Asa08070101Media(Base):
    __tablename__ = "asa0807_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0807_01_01.psk_id'))
    asa0807_01_01 = relationship('Asa08070101', back_populates='asa0807_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01StudentsBenefitedDc1(Base):
    __tablename__ = "naac01_students_benefited_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    carrer_counseling_detail = Column(String, nullable=True)
    number_of_students_attended = Column(Integer)
    number_of_students_placed = Column(Integer, nullable=True)
    year = Column(Date)
    agency_name = Column(String, nullable=True)
    phone_number = Column(String, nullable=True)
    participant_name = Column(String, nullable=True)
    date_from = Column(Date, nullable=True)
    date_to = Column(Date, nullable=True)
    activity_name = Column(String, nullable=True)
    activity_title = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_students_benefited_dc1_media = relationship('Naac01StudentsBenefitedDc1Media', back_populates='naac01_students_benefited_dc1', cascade='all, delete-orphan')

    @validates('year')
    def validate_year(self, key, year):
        if not rule_engine.is_valid_date(year, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {year}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return year

    @validates('date_from')
    def validate_date_from(self, key, date_from):
        if not rule_engine.is_valid_date(date_from, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {date_from}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return date_from

    @validates('date_to')
    def validate_date_to(self, key, date_to):
        if not rule_engine.is_valid_date(date_to, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {date_to}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return date_to



class Naac01StudentsBenefitedDc1Media(Base):
    __tablename__ = "naac01_students_benefited_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_students_benefited_dc1.psk_id'))
    naac01_students_benefited_dc1 = relationship('Naac01StudentsBenefitedDc1', back_populates='naac01_students_benefited_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv03AstrologyOrders04(Base):
    __tablename__ = "svv03_astrology_orders_04"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    astro_member_id = Column(Integer)
    astro_service_details = Column(Text, nullable=True)
    astro_payment_status = Column(String)
    astro_discount_amount = Column(Float, nullable=True)
    astro_amount = Column(Float, nullable=True)
    astro_delivery_date = Column(Date, nullable=True)
    astro_delivery_status = Column(Boolean)
    astro_discount_percentage = Column(Float, nullable=True)
    astro_json_payload = Column(Text, nullable=True)
    astro_order_id = Column(Integer, nullable=True)
    astro_order_date = Column(Date, nullable=True)
    astro_order_status = Column(String)
    astro_service_type = Column(String, nullable=True)
    plan_code = Column(Integer, nullable=True)

    @validates('astro_delivery_date')
    def validate_astro_delivery_date(self, key, astro_delivery_date):
        if not rule_engine.is_valid_date(astro_delivery_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {astro_delivery_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return astro_delivery_date

    @validates('astro_order_date')
    def validate_astro_order_date(self, key, astro_order_date):
        if not rule_engine.is_valid_date(astro_order_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {astro_order_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return astro_order_date



class Svv03AstrologyUsers01(Base):
    __tablename__ = "svv03_astrology_users_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    astro_member_id = Column(Integer)
    astro_first_name = Column(String, nullable=True)
    astro_last_name = Column(String, nullable=True)
    astro_email = Column(String, nullable=True)
    astro_phone_number = Column(String, nullable=True)
    astro_birth_time = Column(Time, nullable=True)
    astro_birth_place = Column(String, nullable=True)
    astro_user_relationship = Column(String)
    astro_gender = Column(String, nullable=True)
    astro_birthdate = Column(Date, nullable=True)
    astro_sun_sign = Column(String, nullable=True)
    astro_moon_sign = Column(String, nullable=True)
    astro_rising_sign = Column(String, nullable=True)
    astro_preferences = Column(Text, nullable=True)

    @validates('astro_email')
    def validate_astro_email(self, key, astro_email):
        if not rule_engine.is_valid_email(astro_email):
            raise ValueError(f"Invalid email address: {astro_email}")
        return astro_email

    @validates('astro_birth_time')
    def validate_astro_birth_time(self, key, astro_birth_time):
        if not rule_engine.is_valid_date(astro_birth_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {astro_birth_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return astro_birth_time

    @validates('astro_birthdate')
    def validate_astro_birthdate(self, key, astro_birthdate):
        if not rule_engine.is_valid_date(astro_birthdate, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {astro_birthdate}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return astro_birthdate



class Ssse01030101(Base):
    __tablename__ = "ssse0103_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String)
    menu_privilege_name = Column(String)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class Ssse01050101(Base):
    __tablename__ = "ssse0105_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text)
    menu_items = Column(Text)
    user_privilege_name = Column(String)



class Ssse01060101(Base):
    __tablename__ = "ssse0106_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    root_subfolder = Column(String)
    app_uid = Column(String)
    app_name = Column(String)
    menu_href = Column(String)
    file_format = Column(String)
    active = Column(Boolean)



class HelpdeskWebsiteLogo(Base):
    __tablename__ = "helpdesk_website_logo"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favicon_caption = Column(String)
    website_name = Column(String)
    website_domain = Column(String)
    google_analytics_key = Column(Text)
    website_version = Column(String)
    helpdesk_website_logo_media = relationship('HelpdeskWebsiteLogoMedia', back_populates='helpdesk_website_logo', cascade='all, delete-orphan')



class HelpdeskWebsiteLogoMedia(Base):
    __tablename__ = "helpdesk_website_logo_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('helpdesk_website_logo.psk_id'))
    helpdesk_website_logo = relationship('HelpdeskWebsiteLogo', back_populates='helpdesk_website_logo_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01StudentsBenefitedForCareerCounseelingDc1(Base):
    __tablename__ = "naac01_students_benefited_for_career_counseeling_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    department_code = Column(String, nullable=True)
    year_of_activity = Column(Date, nullable=True)
    carrer_counseling_detail = Column(Text, nullable=True)
    number_of_students_attended = Column(String, nullable=True)
    number_of_students_placed = Column(String, nullable=True)
    department_name = Column(String, nullable=True)
    counseling_detail = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    naac01_students_benefited_for_career_counseeling_dc1_media = relationship('Naac01StudentsBenefitedForCareerCounseelingDc1Media', back_populates='naac01_students_benefited_for_career_counseeling_dc1', cascade='all, delete-orphan')

    @validates('year_of_activity')
    def validate_year_of_activity(self, key, year_of_activity):
        if not rule_engine.is_valid_date(year_of_activity, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {year_of_activity}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return year_of_activity



class Naac01StudentsBenefitedForCareerCounseelingDc1Media(Base):
    __tablename__ = "naac01_students_benefited_for_career_counseeling_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_students_benefited_for_career_counseeling_dc1.psk_id'))
    naac01_students_benefited_for_career_counseeling_dc1 = relationship('Naac01StudentsBenefitedForCareerCounseelingDc1', back_populates='naac01_students_benefited_for_career_counseeling_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01CollaborativeActivitiesForFacultyExchangeDc1(Base):
    __tablename__ = "naac01_collaborative_activities_for_faculty_exchange_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    activity_title = Column(String, nullable=True)
    agency_name = Column(String, nullable=True)
    phone_number = Column(String, nullable=True)
    participant_name = Column(String, nullable=True)
    collaboration_year = Column(Integer)
    date_from = Column(Date, nullable=True)
    date_to = Column(Date, nullable=True)
    nature_activity = Column(String, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_collaborative_activities_for_faculty_exchange_dc1_media = relationship('Naac01CollaborativeActivitiesForFacultyExchangeDc1Media', back_populates='naac01_collaborative_activities_for_faculty_exchange_dc1', cascade='all, delete-orphan')

    @validates('date_from')
    def validate_date_from(self, key, date_from):
        if not rule_engine.is_valid_date(date_from, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {date_from}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return date_from

    @validates('date_to')
    def validate_date_to(self, key, date_to):
        if not rule_engine.is_valid_date(date_to, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {date_to}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return date_to



class Naac01CollaborativeActivitiesForFacultyExchangeDc1Media(Base):
    __tablename__ = "naac01_collaborative_activities_for_faculty_exchange_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_collaborative_activities_for_faculty_exchange_dc1.psk_id'))
    naac01_collaborative_activities_for_faculty_exchange_dc1 = relationship('Naac01CollaborativeActivitiesForFacultyExchangeDc1', back_populates='naac01_collaborative_activities_for_faculty_exchange_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Naac01NoOfExtensionAndOutreachProgramsDc1(Base):
    __tablename__ = "naac01_no_of_extension_and_outreach_programs_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    department_name = Column(String, nullable=True)
    department_code = Column(String, nullable=True)
    organizing_agency_collaborating = Column(String)
    name_of_the_activity = Column(String, nullable=True)
    name_of_the_scheme = Column(String, nullable=True)
    year_of_activity = Column(String, nullable=True)
    number_of_students = Column(Integer, nullable=True)
    number_of_beneficiaries = Column(Integer, nullable=True)
    staff_name = Column(String, nullable=True)
    staff_id = Column(String, nullable=True)
    naac01_no_of_extension_and_outreach_programs_dc1_media = relationship('Naac01NoOfExtensionAndOutreachProgramsDc1Media', back_populates='naac01_no_of_extension_and_outreach_programs_dc1', cascade='all, delete-orphan')



class Naac01NoOfExtensionAndOutreachProgramsDc1Media(Base):
    __tablename__ = "naac01_no_of_extension_and_outreach_programs_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('naac01_no_of_extension_and_outreach_programs_dc1.psk_id'))
    naac01_no_of_extension_and_outreach_programs_dc1 = relationship('Naac01NoOfExtensionAndOutreachProgramsDc1', back_populates='naac01_no_of_extension_and_outreach_programs_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv02PaymentHistory09(Base):
    __tablename__ = "svv02_payment_history_09"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    parent_psk_id = Column(Integer, nullable=True)
    uuid = Column(String, nullable=True)
    payment_amount = Column(Float, nullable=True)
    transaction_id = Column(String, nullable=True)
    payment_status = Column(String, nullable=True)
    payment_mode = Column(String, nullable=True)
    payment_description = Column(Text, nullable=True)
    virtual_payment_address = Column(String, nullable=True)
    phone_number = Column(String, nullable=True)
    retrieval_reference_number = Column(Integer, nullable=True)
    error_code = Column(Text, nullable=True)
    error_description = Column(Text, nullable=True)
    error_reason = Column(Text, nullable=True)
    refund_amount = Column(Float, nullable=True)
    refund_status = Column(String, nullable=True)
    json_payload = Column(Text, nullable=True)
    json_payload_readable = Column(Text, nullable=True)
    payment_currency = Column(String, nullable=True)



class Asa06060101(Base):
    __tablename__ = "asa0606_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    app_name = Column(String, nullable=True)
    menu_href = Column(String, nullable=True)
    file_format = Column(String, nullable=True)
    active = Column(Boolean)
    root_subfolder = Column(String)
    app_uid = Column(String, nullable=True)



class Gmc13030101(Base):
    __tablename__ = "gmc1303_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    ptype_code = Column(String)
    ptype_name = Column(String, nullable=True)
    ptype_status = Column(String, nullable=True)
    ptype_desc = Column(String, nullable=True)



class Gmc13040101(Base):
    __tablename__ = "gmc1304_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    pcat_code = Column(String, nullable=True)
    ptype_id = Column(String, nullable=True)
    pcat_name = Column(String, nullable=True)
    pcat_desc = Column(String, nullable=True)
    pcat_status = Column(String, nullable=True)



class Gmc13050101(Base):
    __tablename__ = "gmc1305_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    cat_code = Column(String, nullable=True)
    cat_desc = Column(String, nullable=True)
    cat_name = Column(String, nullable=True)
    cat_status = Column(String, nullable=True)
    pcat_id = Column(String, nullable=True)



class Gmc13060101(Base):
    __tablename__ = "gmc1306_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    subcat_code = Column(String, nullable=True)
    cat_id = Column(String, nullable=True)
    subcat_name = Column(String, nullable=True)
    subcat_desc = Column(String, nullable=True)
    subcat_status = Column(String, nullable=True)



class Gmc13070101(Base):
    __tablename__ = "gmc1307_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    item_name = Column(String)
    item_code = Column(String)
    item_price = Column(String)
    item_quanity = Column(String)
    item_discount = Column(String, nullable=True)
    item_unit = Column(String, nullable=True)
    item_hsn = Column(String, nullable=True)
    item_tax = Column(String, nullable=True)
    item_status = Column(String, nullable=True)
    item_prod_type = Column(String, nullable=True)
    item_parentcat = Column(String, nullable=True)
    item_category = Column(String, nullable=True)
    item_subcategory = Column(String, nullable=True)



class Gmc13100101(Base):
    __tablename__ = "gmc1310_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    unit_code = Column(String, nullable=True)
    unit_desc = Column(String, nullable=True)
    unit_name = Column(String, nullable=True)
    unit_status = Column(String, nullable=True)



class Ssse01040101(Base):
    __tablename__ = "ssse0104_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    home_menu = Column(Text)
    active = Column(Boolean)
    first_name = Column(String)
    user_dashboard = Column(Text)
    user_type = Column(Text)
    last_name = Column(String)
    username = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    password = Column(String)
    user_roles = Column(Text)
    ssse0104_01_01_media = relationship('Ssse01040101Media', back_populates='ssse0104_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Ssse01040101Media(Base):
    __tablename__ = "ssse0104_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('ssse0104_01_01.psk_id'))
    ssse0104_01_01 = relationship('Ssse01040101', back_populates='ssse0104_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Gmc10040101(Base):
    __tablename__ = "gmc1004_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    hsn_description = Column(String, nullable=True)
    hsn_effective_date = Column(String, nullable=True)
    hsn_chapter = Column(String, nullable=True)
    hsn_rate = Column(String, nullable=True)
    hsn_cess = Column(Text, nullable=True)
    hsn_code = Column(String, nullable=True)
    hsn_revision = Column(String, nullable=True)



class Gmc10020101(Base):
    __tablename__ = "gmc1002_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    status = Column(String, nullable=True)
    tax_name = Column(String, nullable=True)
    taxtype = Column(String, nullable=True)
    tax_desc = Column(String, nullable=True)
    tax_cess = Column(String, nullable=True)
    tax_ecess = Column(String, nullable=True)
    tax_code = Column(String, nullable=True)



class Ssse01010101(Base):
    __tablename__ = "ssse0101_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text)
    active = Column(String)
    user_role = Column(String)
    user_dashboard_url = Column(String)
    user_dashboard_name = Column(String)



class Ssse01020101(Base):
    __tablename__ = "ssse0102_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_name = Column(String)
    menu_psk_uid = Column(String)
    menu_icon = Column(String)
    menu_href = Column(String)
    menu_psk_id = Column(Integer)
    menu_order = Column(Integer)
    active = Column(String)
    menu_uid = Column(String)
    menu_parent_id = Column(Integer)
    menu_type = Column(String)
    menu_app_bar = Column(String)
    menu_level = Column(Integer)
    menu_code = Column(Text)



class Ssse01070101(Base):
    __tablename__ = "ssse0107_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    home_page_name = Column(String)
    application_root_folder = Column(String)
    application_name = Column(String)
    favicon_name = Column(String)
    application_url = Column(String)
    applicaton_name = Column(String)
    favi_icon = Column(String)
    home_page_url = Column(String)
    ssse0107_01_01_media = relationship('Ssse01070101Media', back_populates='ssse0107_01_01', cascade='all, delete-orphan')



class Ssse01070101Media(Base):
    __tablename__ = "ssse0107_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('ssse0107_01_01.psk_id'))
    ssse0107_01_01 = relationship('Ssse01070101', back_populates='ssse0107_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02UserDevice02(Base):
    __tablename__ = "phpm02_user_device_02"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    device_otp_type = Column(String)
    member_id = Column(Integer)
    device_id = Column(String)
    device_platform = Column(String)
    device_version = Column(String)
    device_otp = Column(String)
    device_otp_duration = Column(String)



class Phpm02UserSettings04(Base):
    __tablename__ = "phpm02_user_settings_04"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    web_notifications = Column(Boolean)
    member_id = Column(Integer)
    privacy_level = Column(String)
    mobile_notifications = Column(Boolean)
    location_services = Column(Boolean)
    language_preference = Column(String)
    theme_preference = Column(String)



class Phpm02UserAuthentication03(Base):
    __tablename__ = "phpm02_user_authentication_03"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    member_id = Column(Integer)
    auth_token = Column(String)
    expiry_date = Column(Date)

    @validates('expiry_date')
    def validate_expiry_date(self, key, expiry_date):
        if not rule_engine.is_valid_date(expiry_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {expiry_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return expiry_date



class Phpm02ProformaNursing101StudentDc2(Base):
    __tablename__ = "phpm02_proforma_nursing_101_student_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    course_name = Column(Integer)
    year_or_semester = Column(String, nullable=True)
    no_of_students = Column(Integer, nullable=True)
    training_period = Column(String, nullable=True)
    no_of_period = Column(Integer, nullable=True)



class Svv04SlidingBanner01(Base):
    __tablename__ = "svv04_sliding_banner_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    banner_status = Column(Boolean)
    start_date = Column(Date, nullable=True)
    start_time = Column(String, nullable=True)
    expire_date = Column(Date, nullable=True)
    banner_name = Column(String, nullable=True)
    banner_order = Column(Integer, nullable=True)
    banner_url = Column(Text, nullable=True)
    banner_type = Column(String, nullable=True)
    image_device_small = Column(String)
    image_device_large = Column(String, nullable=True)
    image_web_small = Column(String, nullable=True)
    image_web_large = Column(String, nullable=True)
    svv04_sliding_banner_01_media = relationship('Svv04SlidingBanner01Media', back_populates='svv04_sliding_banner_01', cascade='all, delete-orphan')

    @validates('start_date')
    def validate_start_date(self, key, start_date):
        if not rule_engine.is_valid_date(start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return start_date

    @validates('expire_date')
    def validate_expire_date(self, key, expire_date):
        if not rule_engine.is_valid_date(expire_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {expire_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return expire_date



class Svv04SlidingBanner01Media(Base):
    __tablename__ = "svv04_sliding_banner_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv04_sliding_banner_01.psk_id'))
    svv04_sliding_banner_01 = relationship('Svv04SlidingBanner01', back_populates='svv04_sliding_banner_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02UserMaster01(Base):
    __tablename__ = "phpm02_user_master_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    lastname = Column(String)
    email = Column(String)
    expiry_date = Column(Date)
    user_marital_status = Column(Boolean)
    password_hash = Column(String)
    user_dob = Column(Date)
    member_id = Column(Integer)
    user_kyc = Column(Text)
    registered_on = Column(Date)
    user_gender = Column(Text)
    member_type = Column(Text)
    user_address = Column(String)
    user_intro = Column(Text)
    user_bio = Column(Text)
    user_father_name = Column(String)
    user_marital_type = Column(String)
    middlename = Column(String)
    mobile = Column(String)
    username = Column(String)
    firstname = Column(String)
    user_profile = Column(Text)
    auth_token = Column(String)
    user_spouse_name = Column(String)
    application_type = Column(String, nullable=True)
    institution_name = Column(String, nullable=True)
    institute_website = Column(String, nullable=True)
    year_of_established = Column(String, nullable=True)
    district = Column(String, nullable=True)
    pincode = Column(String, nullable=True)
    phpm02_user_master_01_media = relationship('Phpm02UserMaster01Media', back_populates='phpm02_user_master_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email

    @validates('expiry_date')
    def validate_expiry_date(self, key, expiry_date):
        if not rule_engine.is_valid_date(expiry_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {expiry_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return expiry_date

    @validates('user_dob')
    def validate_user_dob(self, key, user_dob):
        if not rule_engine.is_valid_date(user_dob, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {user_dob}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return user_dob

    @validates('registered_on')
    def validate_registered_on(self, key, registered_on):
        if not rule_engine.is_valid_date(registered_on, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {registered_on}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return registered_on



class Phpm02UserMaster01Media(Base):
    __tablename__ = "phpm02_user_master_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_user_master_01.psk_id'))
    phpm02_user_master_01 = relationship('Phpm02UserMaster01', back_populates='phpm02_user_master_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02ProformaNursing102PhcDc3(Base):
    __tablename__ = "phpm02_proforma_nursing_102_phc_dc3"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    academic_year = Column(String, nullable=True)
    academic_no_of_student = Column(Integer, nullable=True)
    facility_type = Column(String, nullable=True)
    name_of_phc = Column(String, nullable=True)



class Phpm02ProformaAnm104StudentDc2(Base):
    __tablename__ = "phpm02_proforma_anm_104_student_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    course_name = Column(String, nullable=True)
    year_or_semester = Column(String, nullable=True)
    no_of_students = Column(Integer, nullable=True)
    training_period = Column(String, nullable=True)
    no_of_period = Column(Integer, nullable=True)



class Phpm02ProformaNursing100Dc1(Base):
    __tablename__ = "phpm02_proforma_nursing_100_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    institution_name = Column(Integer, nullable=True)
    institution_type = Column(String)
    year_of_establishment = Column(String, nullable=True)
    affiliation_authority = Column(String, nullable=True)
    financial_year = Column(String, nullable=True)
    document_date = Column(Date)
    pay_fees_by = Column(String, nullable=True)
    phc_facilities = Column(String, nullable=True)
    document_id = Column(String)
    phpm02_proforma_nursing_100_dc1_media = relationship('Phpm02ProformaNursing100Dc1Media', back_populates='phpm02_proforma_nursing_100_dc1', cascade='all, delete-orphan')

    @validates('document_date')
    def validate_document_date(self, key, document_date):
        if not rule_engine.is_valid_date(document_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {document_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return document_date



class Phpm02ProformaNursing100Dc1Media(Base):
    __tablename__ = "phpm02_proforma_nursing_100_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_proforma_nursing_100_dc1.psk_id'))
    phpm02_proforma_nursing_100_dc1 = relationship('Phpm02ProformaNursing100Dc1', back_populates='phpm02_proforma_nursing_100_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class PhpmPasswordResetTokens(Base):
    __tablename__ = "phpm_password_reset_tokens"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    token = Column(String, nullable=True)
    token_expiry = Column(Integer, nullable=True)
    used = Column(Boolean)
    username = Column(String, nullable=True)



class Phpm02ProformaAnm103Dc1(Base):
    __tablename__ = "phpm02_proforma_anm_103_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    institution_name = Column(String, nullable=True)
    institution_type = Column(String, nullable=True)
    year_of_establishment = Column(String, nullable=True)
    affiliation_authority = Column(String, nullable=True)
    Financial_year = Column(String, nullable=True)
    document_id = Column(String, nullable=True)
    document_date = Column(Date, nullable=True)
    avail_government = Column(String, nullable=True)
    pay_fees_by = Column(String, nullable=True)
    phc_facilities = Column(String, nullable=True)
    phpm02_proforma_anm_103_dc1_media = relationship('Phpm02ProformaAnm103Dc1Media', back_populates='phpm02_proforma_anm_103_dc1', cascade='all, delete-orphan')

    @validates('document_date')
    def validate_document_date(self, key, document_date):
        if not rule_engine.is_valid_date(document_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {document_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return document_date



class Phpm02ProformaAnm103Dc1Media(Base):
    __tablename__ = "phpm02_proforma_anm_103_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_proforma_anm_103_dc1.psk_id'))
    phpm02_proforma_anm_103_dc1 = relationship('Phpm02ProformaAnm103Dc1', back_populates='phpm02_proforma_anm_103_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02Block53(Base):
    __tablename__ = "phpm02_block_53"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    hud_psk_id = Column(Integer, nullable=True)
    block_code = Column(String, nullable=True)
    block_name = Column(String, nullable=True)
    block_address = Column(String, nullable=True)
    block_contact_person = Column(Text)
    block_phone = Column(String, nullable=True)
    block_mobile = Column(String, nullable=True)
    active = Column(Boolean)



class Phpm02Company50(Base):
    __tablename__ = "phpm02_company_50"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    company_address = Column(String, nullable=True)
    company_code = Column(String, nullable=True)
    company_name = Column(String, nullable=True)
    company_state = Column(String, nullable=True)
    company_distirict = Column(String, nullable=True)
    company_pincode = Column(String, nullable=True)
    company_academic_year = Column(String)
    company_gstin = Column(String, nullable=True)
    active = Column(Boolean)
    company_logo = Column(String, nullable=True)
    phpm02_company_50_media = relationship('Phpm02Company50Media', back_populates='phpm02_company_50', cascade='all, delete-orphan')



class Phpm02Company50Media(Base):
    __tablename__ = "phpm02_company_50_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_company_50.psk_id'))
    phpm02_company_50 = relationship('Phpm02Company50', back_populates='phpm02_company_50_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02District51(Base):
    __tablename__ = "phpm02_district_51"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    district_code = Column(String, unique=True, nullable=False)
    district_address = Column(String, nullable=True)
    district_phone = Column(String, nullable=True)
    district_fax = Column(String, nullable=True)
    district_mobile = Column(String, nullable=True)
    district_contact_person = Column(String, nullable=True)
    active = Column(Boolean)
    district_name = Column(String, unique=True, nullable=False)



class Phpm02Course55(Base):
    __tablename__ = "phpm02_course_55"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    course_code = Column(String, nullable=True)
    course_name = Column(String, nullable=True)
    course_type = Column(String, nullable=True)
    course_duration = Column(Integer)
    active = Column(Boolean)



class Phpm02Holiday56(Base):
    __tablename__ = "phpm02_holiday_56"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    calendar_year = Column(Integer)
    week_off = Column(String)
    holiday_type = Column(String, nullable=True)
    holiday_date = Column(Date, nullable=True)
    active = Column(Boolean)
    holiday_name = Column(String)

    @validates('holiday_date')
    def validate_holiday_date(self, key, holiday_date):
        if not rule_engine.is_valid_date(holiday_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {holiday_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return holiday_date



class Phpm02Phc54(Base):
    __tablename__ = "phpm02_phc_54"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    phc_mobile = Column(String, nullable=True)
    phc_contact_person = Column(Text)
    active = Column(Boolean)
    phc_address = Column(String, nullable=True)
    phc_phone = Column(String, nullable=True)
    block_psk_id = Column(Integer, nullable=True)
    phc_code = Column(String, nullable=True)
    phc_name = Column(String, nullable=True)
    phc_status = Column(String, nullable=True)



class Phpm02ProformaMphw105Dc1(Base):
    __tablename__ = "phpm02_proforma_mphw_105_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    institution_type = Column(String, nullable=True)
    year_of_establishment = Column(String, nullable=True)
    affiliation_authority = Column(String, nullable=True)
    Financial_year = Column(String, nullable=True)
    document_id = Column(String, nullable=True)
    institution_name = Column(String, nullable=True)
    document_date = Column(Date, nullable=True)
    avail_clinical_facilities = Column(String, nullable=True)
    pay_fees_by = Column(String, nullable=True)
    phc_facilities = Column(String, nullable=True)
    phc_double_rate = Column(String, nullable=True)

    @validates('document_date')
    def validate_document_date(self, key, document_date):
        if not rule_engine.is_valid_date(document_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {document_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return document_date



class Phpm02ProformaMphw106StudentDc2(Base):
    __tablename__ = "phpm02_proforma_mphw_106_student_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    course_name = Column(String, nullable=True)
    year_or_semester = Column(String, nullable=True)
    no_of_students = Column(Integer, nullable=True)
    no_of_students = Column(Integer, nullable=True)
    training_period = Column(String, nullable=True)
    no_of_period = Column(Integer, nullable=True)
    academic_noof_student = Column(Integer, nullable=True)
    name_of_phc = Column(String, nullable=True)



class Phpm02InspectionOfficer57(Base):
    __tablename__ = "phpm02_inspection_officer_57"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    officer_name = Column(String, unique=True, nullable=False)
    officer_district_psk_id = Column(Integer)
    officer_designation = Column(String, nullable=True)
    officer_role_psk_id = Column(Integer, nullable=True)
    active = Column(Boolean)
    officer_contact_no = Column(String, nullable=True)
    officer_email = Column(String, unique=True, nullable=False)
    officer_mobile = Column(String, nullable=True)
    officer_password = Column(String, nullable=True)

    @validates('officer_email')
    def validate_officer_email(self, key, officer_email):
        if not rule_engine.is_valid_email(officer_email):
            raise ValueError(f"Invalid email address: {officer_email}")
        return officer_email



class Phpm02Institution59(Base):
    __tablename__ = "phpm02_institution_59"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    institution_code = Column(String)
    contact_details_text = Column(Text, nullable=True)
    institution_address_text = Column(Text, nullable=True)
    institution_trust_name = Column(String, nullable=True)
    institution_name = Column(String, nullable=True)
    institution_address = Column(String, nullable=True)
    institution_distirict_psk_id = Column(Integer, nullable=True)
    institution_hud_psk_id = Column(Integer, nullable=True)
    institution_block_psk_id = Column(Integer, nullable=True)
    institution_city = Column(String, nullable=True)
    institution_state = Column(String, nullable=True)
    institution_pincode = Column(String, nullable=True)
    institution_date_of_incorporation = Column(Date, nullable=True)
    institution_gstin = Column(String, nullable=True)
    active = Column(Boolean)
    contact_details = Column(String, nullable=True)
    year_of_established = Column(String, nullable=True)
    institution_email = Column(String, nullable=True)
    umis = Column(String, nullable=True)
    phpm02_institution_59_media = relationship('Phpm02Institution59Media', back_populates='phpm02_institution_59', cascade='all, delete-orphan')

    @validates('institution_date_of_incorporation')
    def validate_institution_date_of_incorporation(self, key, institution_date_of_incorporation):
        if not rule_engine.is_valid_date(institution_date_of_incorporation, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {institution_date_of_incorporation}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return institution_date_of_incorporation



class Phpm02Institution59Media(Base):
    __tablename__ = "phpm02_institution_59_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_institution_59.psk_id'))
    phpm02_institution_59 = relationship('Phpm02Institution59', back_populates='phpm02_institution_59_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Phpm02Hud52(Base):
    __tablename__ = "phpm02_hud_52"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    hud_name = Column(String, unique=True, nullable=False)
    hud_code = Column(String, unique=True, nullable=False)
    district_psk_id = Column(Integer, nullable=True)
    hud_address = Column(String, nullable=True)
    hud_phone = Column(String, nullable=True)
    hud_mobile = Column(String, nullable=True)
    hud_contact_person = Column(Text)
    active = Column(Boolean)
    district_name = Column(Text, nullable=True)



class Phpm02Application308FinalOrderDc8(Base):
    __tablename__ = "phpm02_application_308_final_order_dc8"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    parent_psk_id = Column(Integer, nullable=True)
    final_order_id = Column(String, nullable=True)
    final_order_date = Column(Date, nullable=True)
    inspection_report_psk_id = Column(String, nullable=True)
    institution_psk_id = Column(Integer, nullable=True)
    course_psk_id = Column(Integer, nullable=True)
    phc_psk_id = Column(Integer, nullable=True)
    district_psk_id = Column(Integer, nullable=True)

    @validates('final_order_date')
    def validate_final_order_date(self, key, final_order_date):
        if not rule_engine.is_valid_date(final_order_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {final_order_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return final_order_date



class Phpm02Application301MasterDc1(Base):
    __tablename__ = "phpm02_application_301_master_dc1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    institution_type = Column(String, nullable=True)
    institution_psk_id = Column(Integer, nullable=True)
    previous_tieup_gov_date = Column(Date, nullable=True)
    provisional_affilation_upload_uid = Column(String, nullable=True)
    own_hospital_mou_upload_uid = Column(String, nullable=True)
    add_gov_order_upload_uid = Column(String, nullable=True)
    inc_gov_upload_uid = Column(String, nullable=True)
    letter_from_medical_counsil_upload_uid = Column(String, nullable=True)
    affiliation_mgr_university_upload_uid = Column(String, nullable=True)
    own_hospital_clinical_establishment_upload_uid = Column(String, nullable=True)
    no_dues_certificate_upload_uid = Column(String, nullable=True)
    permitted_in_phc_upload_uid = Column(String, nullable=True)
    gov_order_upload_uid = Column(String, nullable=True)
    course_type_psk_id = Column(Integer, nullable=True)
    course_name = Column(String, nullable=True)
    year_of_establishment = Column(String, nullable=True)
    accademic_year = Column(String, nullable=True)
    document_id = Column(String, nullable=True)
    document_date = Column(Date, nullable=True)
    gov_order_number = Column(String, nullable=True)
    gov_order_date = Column(Date, nullable=True)
    add_gov_order_number = Column(String, nullable=True)
    add_gov_order_date = Column(Date, nullable=True)
    permitted_in_phc_yn = Column(Boolean)
    permitted_in_phc_gov_no = Column(String)
    permitted_in_phc_gov_date = Column(Date)
    tnnmc_gov_no = Column(String, nullable=True)
    tnnmc_gov_date = Column(Date, nullable=True)
    inc_gov_no = Column(String, nullable=True)
    inc_gov_date = Column(Date, nullable=True)
    provisional_affilation_gov_no = Column(String, nullable=True)
    provisional_affilation_gov_date = Column(Date, nullable=True)
    affiliation_mgr_university_gov_no = Column(String, nullable=True)
    affiliation_mgr_university_gov_date = Column(Date, nullable=True)
    tnnmc_gov_upload_uid = Column(String, nullable=True)
    recognized_colleges_list_inc_upload_uid = Column(String, nullable=True)
    letter_from_hfw_department_upload_uid = Column(String, nullable=True)
    pay_fees_by_upload_uid = Column(String, nullable=True)
    pervious_tieup_upload_uid = Column(String, nullable=True)
    previous_tieup_gov_no = Column(String, nullable=True)
    consent_letter_building_upload_uid = Column(String, nullable=True)
    letter_from_medical_counsil_gov_no = Column(String, nullable=True)
    letter_from_medical_counsil_gov_date = Column(Date, nullable=True)
    letter_from_hfw_department_gov_no = Column(String, nullable=True)
    letter_from_hfw_department_gov_date = Column(Date, nullable=True)
    application_status = Column(String, nullable=True)
    application_download_date = Column(Date, nullable=True)
    application_upload_uid = Column(String, nullable=True)
    application_upload_date = Column(Date, nullable=True)
    phpm02_application_301_master_dc1_media = relationship('Phpm02Application301MasterDc1Media', back_populates='phpm02_application_301_master_dc1', cascade='all, delete-orphan')

    @validates('previous_tieup_gov_date')
    def validate_previous_tieup_gov_date(self, key, previous_tieup_gov_date):
        if not rule_engine.is_valid_date(previous_tieup_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {previous_tieup_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return previous_tieup_gov_date

    @validates('document_date')
    def validate_document_date(self, key, document_date):
        if not rule_engine.is_valid_date(document_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {document_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return document_date

    @validates('gov_order_date')
    def validate_gov_order_date(self, key, gov_order_date):
        if not rule_engine.is_valid_date(gov_order_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {gov_order_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return gov_order_date

    @validates('add_gov_order_date')
    def validate_add_gov_order_date(self, key, add_gov_order_date):
        if not rule_engine.is_valid_date(add_gov_order_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {add_gov_order_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return add_gov_order_date

    @validates('permitted_in_phc_gov_date')
    def validate_permitted_in_phc_gov_date(self, key, permitted_in_phc_gov_date):
        if not rule_engine.is_valid_date(permitted_in_phc_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {permitted_in_phc_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return permitted_in_phc_gov_date

    @validates('tnnmc_gov_date')
    def validate_tnnmc_gov_date(self, key, tnnmc_gov_date):
        if not rule_engine.is_valid_date(tnnmc_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {tnnmc_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return tnnmc_gov_date

    @validates('inc_gov_date')
    def validate_inc_gov_date(self, key, inc_gov_date):
        if not rule_engine.is_valid_date(inc_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {inc_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return inc_gov_date

    @validates('provisional_affilation_gov_date')
    def validate_provisional_affilation_gov_date(self, key, provisional_affilation_gov_date):
        if not rule_engine.is_valid_date(provisional_affilation_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {provisional_affilation_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return provisional_affilation_gov_date

    @validates('affiliation_mgr_university_gov_date')
    def validate_affiliation_mgr_university_gov_date(self, key, affiliation_mgr_university_gov_date):
        if not rule_engine.is_valid_date(affiliation_mgr_university_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {affiliation_mgr_university_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return affiliation_mgr_university_gov_date

    @validates('letter_from_medical_counsil_gov_date')
    def validate_letter_from_medical_counsil_gov_date(self, key, letter_from_medical_counsil_gov_date):
        if not rule_engine.is_valid_date(letter_from_medical_counsil_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {letter_from_medical_counsil_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return letter_from_medical_counsil_gov_date

    @validates('letter_from_hfw_department_gov_date')
    def validate_letter_from_hfw_department_gov_date(self, key, letter_from_hfw_department_gov_date):
        if not rule_engine.is_valid_date(letter_from_hfw_department_gov_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {letter_from_hfw_department_gov_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return letter_from_hfw_department_gov_date

    @validates('application_download_date')
    def validate_application_download_date(self, key, application_download_date):
        if not rule_engine.is_valid_date(application_download_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {application_download_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return application_download_date

    @validates('application_upload_date')
    def validate_application_upload_date(self, key, application_upload_date):
        if not rule_engine.is_valid_date(application_upload_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {application_upload_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return application_upload_date



class Phpm02Application301MasterDc1Media(Base):
    __tablename__ = "phpm02_application_301_master_dc1_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('phpm02_application_301_master_dc1.psk_id'))
    phpm02_application_301_master_dc1 = relationship('Phpm02Application301MasterDc1', back_populates='phpm02_application_301_master_dc1_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa08060101(Base):
    __tablename__ = "asa0806_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    app_name = Column(String)
    menu_href = Column(String)
    file_format = Column(String)
    active = Column(Boolean)
    root_subfolder = Column(String)
    app_uid = Column(String)



class Svv04DiscoverPost02(Base):
    __tablename__ = "svv04_discover_post_02"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    services_title = Column(String, nullable=True)
    events_image_uid = Column(String, nullable=True)
    astro_benefits = Column(Text, nullable=True)
    donate_benefits = Column(Text, nullable=True)
    services_description = Column(Text, nullable=True)
    events_title = Column(String, nullable=True)
    events_benefits = Column(Text, nullable=True)
    astro_title = Column(String, nullable=True)
    donate_image_uid = Column(String, nullable=True)
    services_benefits = Column(Text, nullable=True)
    post_size = Column(String, nullable=True)
    post_type = Column(String, nullable=True)
    post_benefits = Column(Text, nullable=True)
    post_publish_date = Column(Date, nullable=True)
    post_hashtags = Column(Text, nullable=True)
    post_image_uid = Column(String, nullable=True)
    post_title = Column(String, nullable=True)
    post_description = Column(Text, nullable=True)
    body_image_uid = Column(String, nullable=True)
    body_title = Column(String, nullable=True)
    body_description = Column(Text, nullable=True)
    services_image_uid = Column(String, nullable=True)
    events_description = Column(Text, nullable=True)
    astro_image_uid = Column(String, nullable=True)
    astro_description = Column(Text, nullable=True)
    donate_title = Column(String, nullable=True)
    donate_description = Column(Text, nullable=True)
    post_publish_status = Column(String, nullable=True)
    svv04_discover_post_02_media = relationship('Svv04DiscoverPost02Media', back_populates='svv04_discover_post_02', cascade='all, delete-orphan')
    svv04_discover_post_02_post = relationship('Svv04DiscoverPost02Post', back_populates='svv04_discover_post_02', cascade='all, delete-orphan')
    svv04_discover_post_02_post_reaction = relationship('Svv04DiscoverPost02PostReaction', back_populates='svv04_discover_post_02', cascade='all, delete-orphan')

    @validates('post_publish_date')
    def validate_post_publish_date(self, key, post_publish_date):
        if not rule_engine.is_valid_date(post_publish_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {post_publish_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return post_publish_date



class Svv04DiscoverPost02Media(Base):
    __tablename__ = "svv04_discover_post_02_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv04_discover_post_02.psk_id'))
    svv04_discover_post_02 = relationship('Svv04DiscoverPost02', back_populates='svv04_discover_post_02_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv04DiscoverPost02Post(Base):
    __tablename__ = "svv04_discover_post_02_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv04_discover_post_02.psk_id'))
    svv04_discover_post_02 = relationship('Svv04DiscoverPost02', back_populates='svv04_discover_post_02_post')
    post_reaction = relationship('Svv04DiscoverPost02PostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Svv04DiscoverPost02PostReaction(Base):
    __tablename__ = "svv04_discover_post_02_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('svv04_discover_post_02.psk_id'))
    svv04_discover_post_02 = relationship('Svv04DiscoverPost02', back_populates='svv04_discover_post_02_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('svv04_discover_post_02_post.psk_id'))
    post = relationship('Svv04DiscoverPost02Post', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Asa05060101(Base):
    __tablename__ = "asa0506_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    app_name = Column(String)
    menu_href = Column(String)
    file_format = Column(String)
    active = Column(Boolean)
    root_subfolder = Column(String)
    app_uid = Column(String)



class Phpm02Application302StudentDc2(Base):
    __tablename__ = "phpm02_application_302_student_dc2"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    no_of_students = Column(Integer, nullable=True)
    parent_psk_id = Column(Integer)
    course_name_pskid = Column(Integer, nullable=True)
    training_period = Column(String, nullable=True)
    document_id = Column(Integer)
    year_or_semester = Column(String, nullable=True)
    no_of_period = Column(Integer, nullable=True)



class Phpm02Application303PhcDc3(Base):
    __tablename__ = "phpm02_application_303_phc_dc3"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    name_of_phc_pskid = Column(Integer, nullable=True)
    parent_psk_id = Column(Integer, nullable=True)
    document_id = Column(String, nullable=True)
    academic_no_of_student = Column(Integer, nullable=True)



class Phpm02Application304FinalDc4(Base):
    __tablename__ = "phpm02_application_304_final_dc4"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    document_id = Column(String)
    checklist_status = Column(Boolean)
    parent_psk_id = Column(Integer)
    checklist_name = Column(String, nullable=True)
    checklist_remarks = Column(Text, nullable=True)



class Phpm02Application305WorkflowTaskDc5(Base):
    __tablename__ = "phpm02_application_305_workflow_task_dc5"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    workflow_name = Column(String)
    parent_psk_id = Column(Integer, nullable=True)
    tranasaction_name = Column(String, nullable=True)
    from_whom = Column(String, nullable=True)
    to_whom = Column(String, nullable=True)
    due_on = Column(Date, nullable=True)
    message = Column(String, nullable=True)
    app_level = Column(Integer, nullable=True)
    approval_status = Column(String, nullable=True)
    comments = Column(String, nullable=True)

    @validates('due_on')
    def validate_due_on(self, key, due_on):
        if not rule_engine.is_valid_date(due_on, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {due_on}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return due_on



class Phpm02Application306AssignOfficerDc6(Base):
    __tablename__ = "phpm02_application_306_assign_officer_dc6"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    parent_psk_id = Column(Integer, nullable=True)
    document_id = Column(String, nullable=True)
    assign_document_id = Column(String, nullable=True)
    assign_document_date = Column(Date, nullable=True)
    inspection_officer_psk_id = Column(Integer, nullable=True)
    officer_name = Column(String, nullable=True)
    officer_designation = Column(String, nullable=True)
    officer_mobile = Column(String, nullable=True)
    officer_email = Column(String, nullable=True)
    officer_approval_status = Column(String, nullable=True)
    officer_reporting_to = Column(String, nullable=True)

    @validates('assign_document_date')
    def validate_assign_document_date(self, key, assign_document_date):
        if not rule_engine.is_valid_date(assign_document_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {assign_document_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return assign_document_date

    @validates('officer_email')
    def validate_officer_email(self, key, officer_email):
        if not rule_engine.is_valid_email(officer_email):
            raise ValueError(f"Invalid email address: {officer_email}")
        return officer_email



class Phpm02Application307InspectionReportDc7(Base):
    __tablename__ = "phpm02_application_307_inspection_report_dc7"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    parent_psk_id = Column(Integer, nullable=True)
    document_id = Column(String, nullable=True)
    inspection_report_id = Column(String, nullable=True)
    inspection_report_date = Column(Date, nullable=True)
    inspection_officer_psk_id = Column(Integer, nullable=True)
    institute_pskid = Column(Integer, nullable=True)
    institute_trust_type = Column(String, nullable=True)
    institute_total_area = Column(Float, nullable=True)
    info_candidates_perbatch = Column(Integer, nullable=True)
    info_hospital_affiliated = Column(String, nullable=True)
    non_teaching_driver = Column(String, nullable=True)
    non_teaching_cleaner = Column(String, nullable=True)
    non_teaching_office_assistant = Column(String, nullable=True)
    non_teaching_sweeper = Column(String, nullable=True)
    hostel_staff = Column(String, nullable=True)
    hostel_warden = Column(String, nullable=True)
    hostel_cook = Column(String, nullable=True)
    hostel_sweeper = Column(String, nullable=True)
    hostel_security = Column(String, nullable=True)
    transport_vehicleno_four_wheeler = Column(String, nullable=True)
    transport_vehicleno_two_wheeler = Column(String, nullable=True)
    info_own_practice = Column(Boolean)
    info_inspection_Remarks = Column(Text, nullable=True)
    info_training_schools = Column(String, nullable=True)
    upload_uid_consent_letter = Column(String, nullable=True)
    upload_uid_building_plan_cert = Column(String, nullable=True)
    upload_uid_building_stability_cert = Column(String, nullable=True)
    upload_uid_sanitation_cert = Column(String, nullable=True)
    upload_uid_occupation_cert = Column(String, nullable=True)
    lab_nursing = Column(String, nullable=True)
    lab_anatomy = Column(String, nullable=True)
    lab_mch = Column(String, nullable=True)
    lab_community_health = Column(String, nullable=True)
    infra_staff_room = Column(String, nullable=True)
    infra_faculty_room = Column(String, nullable=True)
    infra_multipurpose_hall = Column(String, nullable=True)
    infra_class_room = Column(String, nullable=True)
    infra_nutrition_lab = Column(String, nullable=True)
    infra_library = Column(String, nullable=True)
    infra_audio_visual_room = Column(String, nullable=True)
    infra_provision_for_toliets = Column(String, nullable=True)
    infra_provision_for_bathrooms = Column(String, nullable=True)
    infra_sick_room = Column(String, nullable=True)
    infra_telephone_connection = Column(String, nullable=True)
    hostel_facilities = Column(String, nullable=True)
    hostel_doubleroom = Column(String, nullable=True)
    hostel_sanitary = Column(String, nullable=True)
    hostel_visitor_room = Column(String, nullable=True)
    hostel_reading_room = Column(String, nullable=True)
    hostel_stores = Column(String, nullable=True)
    hostel_recreation = Column(String, nullable=True)
    hostel_dinning = Column(String, nullable=True)
    hostel_kitchen = Column(String, nullable=True)
    teaching_faculty = Column(String, nullable=True)
    teaching_principal = Column(String, nullable=True)
    teaching_tutors = Column(String, nullable=True)
    non_teaching_staff = Column(String, nullable=True)
    non_teaching_accounts_cashier = Column(String, nullable=True)
    non_teaching_clerk = Column(String, nullable=True)

    @validates('inspection_report_date')
    def validate_inspection_report_date(self, key, inspection_report_date):
        if not rule_engine.is_valid_date(inspection_report_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {inspection_report_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return inspection_report_date



